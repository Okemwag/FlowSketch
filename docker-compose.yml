version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: flowsketch_db
    environment:
      POSTGRES_DB: flowsketch
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - flowsketch_network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: flowsketch_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - flowsketch_network

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: flowsketch_backend
    environment:
      - DEBUG=True
      - SECRET_KEY=django-insecure-dev-key-change-in-production
      - DB_NAME=flowsketch
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
    volumes:
      - ./backend:/app
      - backend_media:/app/media
      - backend_logs:/app/logs
      - backend_static:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/docs/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - flowsketch_network
    command: >
      sh -c "
        python manage.py collectstatic --noinput &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000
      "

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: flowsketch_celery_worker
    environment:
      - DEBUG=True
      - SECRET_KEY=django-insecure-dev-key-change-in-production
      - DB_NAME=flowsketch
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - backend_media:/app/media
      - backend_logs:/app/logs
    depends_on:
      - db
      - redis
      - backend
    networks:
      - flowsketch_network
    command: celery -A flowsketch worker --loglevel=info

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: flowsketch_celery_beat
    environment:
      - DEBUG=True
      - SECRET_KEY=django-insecure-dev-key-change-in-production
      - DB_NAME=flowsketch
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    depends_on:
      - db
      - redis
      - backend
    networks:
      - flowsketch_network
    command: celery -A flowsketch beat --loglevel=info

  # Nginx (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: flowsketch_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - backend_static:/var/www/static
      - backend_media:/var/www/media
    depends_on:
      - backend
    networks:
      - flowsketch_network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_media:
    driver: local
  backend_logs:
    driver: local
  backend_static:
    driver: local

networks:
  flowsketch_network:
    driver: bridge